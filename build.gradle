plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.7'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    testImplementation('org.springframework.batch:spring-batch-test')

    /* TEST */
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    // TestContainer
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mysql'

    // 객체-JSON에 대해 직렬화/역직렬화
    implementation 'com.fasterxml.jackson.core:jackson-core:latest.release'
    implementation 'com.fasterxml.jackson.core:jackson-databind:latest.release'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:latest.release'

    // 채팅 구현
    implementation 'org.springframework.boot:spring-boot-starter-websocket' // ws
    implementation 'org.springframework.boot:spring-boot-starter-amqp' // rabbitmq와 같은 외부 메시지 브로커 사용
    implementation 'org.springframework.boot:spring-boot-starter-reactor-netty:3.0.0' // 서버 <-> rabbitmq의 비동기 네트워크 처리

    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.68.Final:osx-aarch_64'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.12.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.12.5'

    // Apache Commons Lang3
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    // WebClient
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

    // monoitoring
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    runtimeOnly("io.micrometer:micrometer-registry-prometheus")

    // logging
    implementation 'net.logstash.logback:logstash-logback-encoder:8.1'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyle {
    configFile = file("checkstyle/config/rules.xml")
    configProperties = ["suppressionFile": "checkstyle/config/suppressions.xml"]
    maxWarnings = 0
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, includes: [
                    // Service 계층 (핵심 비즈니스 로직)
                    '**/domain/context/**/service/**/*.class'
            ])
        }))
    }
}
